# QuickMathJS CLI User Guide

# This script-style guide demonstrates how to use various mathematical operations and features in QuickMathJS CLI. 

# BASIC ARITHMETIC OPERATIONS

# Addition
5 + 3 := 8

# Subtraction
7 - 4 := 3

# Multiplication
6 * 3 := 18

# Division
8 / 2 := 4

# Power
3 ^ 4 := 81

# Modulus (Remainder after Division)
10 % 3 := 1

# ADVANCED MATHEMATICAL FUNCTIONS

# Trigonometric Functions
# Note: tan(pi/4) = 1, but this script won't give exactly 1 due to floating-point approximations. 
#       This is common in many software libraries.
sin(pi/2) := 1
cos(pi) := -1
tan(pi/4) := 0.9999999999999999

# Inverse Trigonometric Functions
asin(0.5) := 0.5235987755982989
acos(0.5) := 1.0471975511965979

# Logarithmic and Exponential Functions
log(100) := 4.605170185988092
exp(2) := 7.38905609893065

# Square root and nth root
sqrt(9) := 3
nthRoot(27, 3) := 3

# Factorial
5! := 120

# CONSTANTS

# Pi (3.141592653589793)
2 * pi := 6.283185307179586

# Euler's number (2.718281828459045)
2 * e := 5.43656365691809

# Tau (6.283185307179586)
tau/2 := 3.141592653589793

# Golden ratio (1.618033988749895)
2 * phi := 3.23606797749979

# UNITS (You can perform operations with physical units and convert them)

# Basic unit operations
5 m + 3 m := 8 m
10 kg * 10 m/s^2 := 100 N

# Unit conversions
5 m to cm := 500 cm

# MATRICES AND ARRAYS

# Matrix Creation
matrix = [1, 2; 3, 4]

# Matrix Addition
matrix + [1, 1; 1, 1] := [[2, 3], [4, 5]]

# Matrix Determinant
det(matrix) := -2

# Transpose
transpose(matrix) := [[1, 3], [2, 4]]

# SAVING AND LOADING CALCULATIONS

# All of your calculations are saved in the URL. To save your work, simply copy the URL. To load your calculations, paste the saved URL into your browser.

# ERROR HANDLING

# If you make a mistake in your calculations, QuickMathJS CLI will show an error message right next to the problematic expression.

1/0 := Infinity

# OUTPUT STYLES

# Decimal Representation
324 := 324

# Hexadecimal Representation
hex(324) := 0x144

# Binary Representation
# Input as Binary
0b1100100 := 100

# Convert Decimal to Binary
bin(324) := 0b101000100






